var Tree = function(root, children) {  this.root = root;  this.children = [];  if(children) {   this.children = children;  }  this._height = -1; };  Tree.prototype.build = function(data) {   var hcounter = 0;  for(var label in data) {   this.root = new Node(label, 0);   this.children = buildSubtree(data[label], 1);   break;  }  this._height = hcounter + 1;   function buildSubtree(data, level) {   var children = [];   for(var label in data) {    var node = new Node(label, level);    if(data[label] == null) {     children.push(new Tree(node));    }    else {     children.push(new Tree(node, buildSubtree(data[label], level + 1)));    }   }   if(level > hcounter) {    hcounter = level;   }   return children;  } };  Tree.prototype.traverse = function(callback) {  callback(this.root);  for(var i = 0; i < this.children.length; i++) {   this.children[i].traverse(callback);  } };  Tree.prototype.subtree = function(node) {  var label = node,      callback = function(root) {   if(root.label == label) {    return this;   }      };  if(node instanceof Node) {   label = node.label;  }  return this.traverse(callback);  }; var Node = function(label, level) {  this.label = label;  this.level = level; }; var ArchContext = function(context, coordinate) {  this.ctx = context;  this.coordinate = coordinate; };  ArchContext.prototype.draw = function(polar1, polar2) {  var from = this.coordinate.polarToCartesian(polar1[0], polar1[1], true),      to = this.coordinate.polarToCartesian(polar2[0], polar2[1], true);  this.ctx.lineWidth = 1;  this.ctx.strokeStyle = "#F2805A";  this.ctx.beginPath();  this.ctx.moveTo(from[0], from[1]);  this.ctx.lineTo(to[0], to[1]);  this.ctx.closePath();  this.ctx.stroke(); }; var LabelContext = function(context, coordinate) {  this.ctx = context;  this.coordinate = coordinate; };  LabelContext.prototype.draw = function(polar, label) {  var position = this.coordinate.polarToCartesian(polar[0], polar[1], true);  this.ctx.font = "10px sans-serif";  this.ctx.textAlign = "center";  this.ctx.textBaseline = "middle";  this.ctx.fillStyle = "#261E1B";  this.ctx.fillText(label, position[0], position[1]); }; var NodeContext = function(context, coordinate) {  this.ctx = context;  this.coordinate = coordinate; };  NodeContext.prototype.draw = function(polar, level) {  var radius = 20;  if(level) {   radius /= level;  }  var center = this.coordinate.polarToCartesian(polar[0], polar[1], true);  this.ctx.fillStyle = "#F2805A";  this.ctx.beginPath();  this.ctx.arc(center[0], center[1], radius, 0, 2 * Math.PI, true);  this.ctx.closePath();  this.ctx.fill(); }; var Coordinate = function(X,Y) {  this.X = X;  this.Y = Y; };  Coordinate.prototype.cartesian = function(x, y) {  return [this.X + x, this.Y + y]; };  Coordinate.prototype.polar = function(d, r) {  var x = d * Math.cos(r) + this.X;  var y = d * Math.sin(r) + this.Y;  return [Math.sqrt(x * x + y * y), Math.atan2(y, x)]; };  Coordinate.prototype.polarToCartesian = function(d, r, absolute) {  if(absolute) {   return [d * Math.cos(r) + this.X, d * Math.sin(r) + this.Y];  }  else {   return [d * Math.cos(r), d * Math.sin(r)];  } };  Coordinate.prototype.cartesianToPolar = function(x, y, absolute) {  if(absolute) {   x += this.X;   y += this.Y;  }   return [Math.sqrt(x * x + y * y), Math.atan2(y, x)]; }; var RadialTree = function(tree, zoom) {  this._radiusincrement = 100;  if(zoom) {   this._radiusincrement = zoom;  }  this._canvaswide = tree._height * this._radiusincrement * 2;    var coord = new Coordinate(this._canvaswide / 2, this._canvaswide / 2);    this.archcanvas = document.getElementById("arch-context");  this.archcanvas.width = this.archcanvas.height = this._canvaswide;  this.archctx = new ArchContext(this.archcanvas.getContext("2d"), coord);    this.nodecanvas = document.getElementById("node-context");  this.nodecanvas.width = this.nodecanvas.height = this._canvaswide;  this.nodectx = new NodeContext(this.nodecanvas.getContext("2d"), coord);   this.labelcanvas = document.getElementById("label-context");  this.labelcanvas.width = this.labelcanvas.height = this._canvaswide;  this.labelctx = new LabelContext(this.labelcanvas.getContext("2d"), coord);   this.tree = tree; };  RadialTree.prototype.draw = function() {  this._drawnode = function(label, polar, parentpolar) {   this.nodectx.draw(polar, (polar[0] / this._radiusincrement) + 1);   this.labelctx.draw(polar, label);   if(parentpolar) {    this.archctx.draw(parentpolar, polar);   }  };   this._drawSubtree = function(tree, limit, parentpolar) {   var angleincrement = (limit[1] - limit[0]) / tree.children.length;   for(var i = 0; i < tree.children.length; i++) {    var node = tree.children[i].root;    var polar = [this._radiusincrement + parentpolar[0], limit[0] + angleincrement * i];    this._drawnode(node.label, polar, parentpolar);    if(tree.children[i].children.length > 0) {     this._drawSubtree(tree.children[i], angleLimit(polar[1], node.level, angleincrement), polar);    }   }  };   this._drawnode(this.tree.root.label, [0,0]);  this._drawSubtree(this.tree, [0, 2 * Math.PI], [0,0]);   function bisectorLimit(angle, increment) {   return [angle - increment / 2, angle + increment / 2];  }   function tangentLimit(angle, level) {   var increment = 2 * Math.asin(level / (level + 1));   return [angle - increment, angle + increment];  }   function angleLimit(angle, level, increment) {   var limit = bisectorLimit(angle, increment);   var tangent = tangentLimit(angle, level);   if(limit[0] < tangent[0]) {    limit[0] = tangent[0];   }   if(limit[1] > tangent[1]) {    limit[1] = tangent[1];   }   return limit;  } }; 